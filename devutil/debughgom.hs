------------------------------------------------------------------
-- |
-- Module      : Debug
-- Copyright   : (c) Paul Brauner 2009
--               (c) Emilie Balland 2009
--               (c) INRIA 2009
-- Licence     : GPL (see COPYING)
--
-- Maintainer  : paul.brauner@inria.fr
-- Stability   : provisional
-- Portability : non-portable (requires generalized newtype deriving)
--
-- Run hgom on random modules and runs javac on generated files
--------------------------------------------------------------------

module Main where

import Gom.Pretty ()
import Gom.Random ()
import Gom.Parser
import Gom.Checker
import Gom.Sig

-- for t*.gom testing
import Test.HUnit.Base((@?=))
import System.FilePath((</>))

-- generated by cabal
-- for generated parser tesing
import System.Cmd(rawSystem)
import Control.Monad(forM_)
import Data.Char(toLower)
import System.Directory
import System.Exit

import Control.Monad (forM)
import System.Directory (doesDirectoryExist, getDirectoryContents)

import System.FilePath.Glob
import Test.QuickCheck.Gen(sample')
import Test.QuickCheck.Arbitrary(arbitrary)
import Test.HUnit.Text(runTestTT)
import Test.HUnit
import Control.Monad(replicateM_)
import Test.QuickCheck.Gen(listOf)
import Test.QuickCheck.Gen(suchThat)
import Control.Monad(replicateM)
import System.IO(hFlush)
import System.IO(stdout)

doInTempDir :: IO a -> IO a
doInTempDir a = do
  tmp <- getTemporaryDirectory
  cur <- getCurrentDirectory
  setCurrentDirectory tmp
  r <- a
  setCurrentDirectory cur
  return r

checks m = maybe True (const False) (checkEverything m)

testSig :: IO ()
testSig = do
  sigs <- concat `fmap` replicateM 10 (sample' $ arbitrary `suchThat` checks)
  sigs `forM_` \sig -> doInTempDir $ do
    putStr "."
    hFlush stdout
    case sig of
      Module m _ _ -> do
        let pack = map toLower m
        writeFile "Test.gom" $ show sig
        _ <- rawSystem "/home/brauner/hgom/dist/build/hgom/hgom" ["-r","Test.gom"]
        jfs <- globDir1 (compile $ "**" </> "*.java") pack
        st <- rawSystem "javac" jfs
        st @?= ExitSuccess
        removeDirectoryRecursive pack

main = runTestTT (TestCase testSig)

